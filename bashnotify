#!/bin/bash
#
# pbrisbin 2010
#
# http://pbrisbin.com/bin/bashnotify
#
# modify the config after it's written!
#
###

### utilities {{{
message() { echo 'usage: bashnotify [start|stop|restart]'; exit 1; }

logger() { echo "$(date +'[ %d %b %Y %H:%M ]') :: $*" | tee -a "$log"; }

errorout() { logger "error: $*"; exit 1; }

# }}}

### write config file {{{
write_config() {
  if [[ ! -f "$config" ]]; then

    logger "NOTE: writing example config to $config..."
    logger "you should edit this file before starting the deamon"

    cat > "$config" << EOF
#!/bin/bash
#
# bashnotify config - any valid bash is allowed, you
# only need to define handle_event() for the deamon
# to run properly
#
# this example config uses dzen
#
# \$mydir exists, and it's value is $mydir
#
###

# monitor width in pixels
monitor_x=1920

# monitor height in pixels
monitor_y=1080

# how long to appear onscreen
delay=3

# dzen appearance
font='Verdana-8'     # aur/dzen2-svn required (xft font) 
foreground='#ffffff'
background='#303030'

# dzen size in pixels
height=20
width=400

# distance of upper-left corner from left edge
x_offset=\$((monitor_x-width-50))

# distance of upper-left corner from top edge
y_offset=\$((monitor_y-height-50))

###
#
# the actual handle_event() definition
#
# this is the only requirement for a valid config
#
###

handle_event() {
  local pipe="\$mydir/pipe"

  if [[ ! -e "\$pipe" ]]; then
    mkfifo "\$pipe"
    (dzen2 -tw \$width -h \$height -x \$x_offset -y \$y_offset -fn "\$font" -bg \$background -fg \$foreground < "\$pipe"; rm -f "\$pipe") &
  fi
  
  (mpc | head -1; sleep \$delay) >> "\$pipe"
}

EOF

  exit 0

  fi

  . "$config"

  type -p handle_event || errorout 'handle_event() not defined, check your config'
}

# }}}

### start/stop deamon {{{
start_daemon() {
  [[ -f "$pid" ]] && errorout "file found at $pid, daemon already running?"

  # start listening in background
  ( while read -r; do
      handle_event
    done < <(mpc idleloop player) ) &

  echo $! > "$pid"
}

stop_daemon() {
  if [[ -f "$pid" ]]; then
    kill $(cat "$pid") || errorout 'error stopping daemon'

    rm "$pid"
  fi
}

# }}}

### constants

mydir="$HOME/.bashnotify"

config="$mydir/config"

pid="$mydir/pid"

log="$mydir/log"

pipe="$mydir/pipe"

### run it

if [[ ! -d "$mydir" ]]; then
  mkdir -p "$mydir" || errorout "unable to create my dir $mydir"
fi

write_config

case "$1" in
  start)   start_daemon                       ;;
  stop)    stop_daemon                        ;;
  restart) stop_daemon; sleep 3; start_daemon ;;
  *)       message                            ;;
esac
