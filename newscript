#!/bin/bash
#
# pbrisbin 2010
#
# start a new script from a template
#
###

errorout() { echo "error: $*" >&2; exit 1; }

message() { echo 'usage: newscript [name]'; exit 1; }

check_md5() {
  local mode="$1"
  local _md5="$(md5sum "$2" | awk '{print $1}')"

  case "$mode" in
    set) md5="$_md5"                              ;;
    get) [[ "$md5" = "$_md5" ]]                   ;;
    *)   errorout 'invalid option to check_md5()' ;;
  esac
}

write_template() {
  local file="$1"

  echo "new: $file..."
  sleep 1

  # a template
  cat > "$file" << EOF
#!/bin/bash
#
# pbrisbin $(date +%Y)
#
###

errorout() { echo "error: \$*" >&2; exit 1; }

message() { echo 'usage: $name [args]'; exit 1; }

parse_options() {
  while [[ -n "\$1" ]]; do
    case "\$1" in
      -f|--foo) shift; foo="\$1" ;;
      --)       break           ;;
      -*)       message         ;;
      *)        args+=( "\$1" )  ;;
    esac
    shift
  done

  [[ -n "\$*" ]] && args+= ( "\$@" )
}

parse_options "\$@"



EOF

  # only owner/group can execute
  chmod 754 "$file"
}

bin="$HOME/.bin"

[[ ! -d "$bin" ]] && errorout "$bin: directory not found"

[[ -z "$1" ]] && message

name="$(basename "$1")"
script="$bin/$name"

[[ -e "$script" ]] && errorout "$script: script exists"

write_template "$script" || errorout 'failed creating template'

# set md5 for the unedited script
check_md5 set "$script"

# edit it
vim +27 "$script"

# abort if we didn't change it
if check_md5 get "$script"; then
  echo 'aborted unmodified script'
  rm "$script" || echo 'failed to remove'
  exit 1
fi
