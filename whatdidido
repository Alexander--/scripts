#!/bin/bash
#
# pbrisbin 2009
#
###

errorout() { echo "$*" >&2; exit 1; }

message() {
  cat << EOF
  usage:

    $(basename "$0") <max>

      show me what i've upgraded looking back a maximum <max> -Syu s

    $(basename "$0") <max> <min>

      show me what i've upgraded looking back between minimum <min> and
      maximum <max> -Syu s

EOF
  exit 1
}

print_block() {
  local top=${marks[$1]}    # the line num of the start mark
  local bot=${marks[$1+$2]} # the line num of the end mark
  local H=$((bot))          # the arg for head -n to print up until the end mark (inclusive)
  local T=$((bot-top+1))    # the arg for tail -n to print down from the start mark (inclusive)

  head -n $H "$file" | tail -n $T | grep "$filter" | while read -r line; do
    # colorize occurances of $mark
    echo -e "$(sed -r "s|.*$mark$|\\\e[0;32m&\\\e[0m|g" <<< $line)"
  done
}
 
# what log to check
file='/var/log/pacman.log'

# regex for section delimiter
mark='starting full system upgrade$'

# regex for filtering within the printed block
filter=" upgraded.*(.*)$\|$mark"

[[ "$1" =~ -h|--help ]] && message

case $# in
  0) m=1  ; n=0  ;; # default, show up to most recent -Syu
  1) m=$1 ; n=0  ;; # pass in m, show up to -Syu m
  2) m=$1 ; n=$2 ;; # pass in m and n, show between -Syus m and n
  *) message     ;; # else, print help
esac

# check that the log's present
[[ ! -f "$file" ]] && errorout "$file not found"

# check that m and n are integers
[[ -n "${m//[0-9]/}${n//[0-9]/}" ]] && errorout 'invalid argument - non-integer'

# check that m > n
[[ $m -le $n ]] && errorout 'invalid argument - max <= min'

# construct an array of line numbers for each mark in file
marks=( $(grep -n "$mark" "$file" | cut -d ':' -f 1) )

# total number of marks in file
max=${#marks[@]}

# add a closing mark to the array
marks+=( $(( $(wc -l < "$file")+1 )) )

# print it
print_block $((max-m)) $((m-n))
