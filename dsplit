#!/bin/bash
#
# pbrisbin 2009
#
# http://pbrisbin.com/bin/dsplit
#
###

message() {
  echo "usage: dsplit [dir] [option] [argument]"
  echo
  echo "  options:"
  echo "        -s       split contents of [dir] into"
  echo "                 subdirectories of size <= [argument] KB"
  echo "        -n       split contents of [dir] ~evenly into"
  echo "                 [argument] subdirectories"
  echo
  exit 1
}

errorout() { echo "error: $*"; exit 1; }

make_clean() {
  rm -rf "$workdir"
  mkdir -p "$workdir"
}

by_size() {
  local count=1
  local cur_size=0 dir

  while read -r size dir; do
    [ $size -gt $s ] && errorout "file $dir: too big for size $s"
    new_size=$((cur_size+size))

    if [ $new_size -gt $s ]; then
      count=$((count+1))
      new_size=$size
    fi

    echo $dir ${dir}dir_$count >> "$workdir/move.lst"
    cur_size=$new_size
  done < "$workdir/sizes.lst"
}

by_num() {
  local nof=$(wc -l < "$workdir/sizes.lst")
  local per=$((nof/n+1))
  local now=0
  local count=1 dir
  
  while read -r dir; do
    now=$((now+1))

    if [ $now -gt $per ]; then
      count=$((count+1))
      now=1
    fi

    [ $count -gt $n ] && count=$n
    echo $dir ${dir}dir_$count >> "$workdir/move.lst"

  done < "$workdir/sizes.lst"
}

move() {
  local from to

  # uncomment this for a 'dry run'
  cat "$workdir/move.lst"; return

  # the real run...
  while read -r from to; do
    [ -d "$to" ] || mkdir "$to"
    mv -iv "$from" "$to/"
  done < "$workdir/move.lst"
}
    
workdir='/tmp/dsplit'

# getopt
while [ -n "$1" ]; do
  case "$1" in
    -s) shift; s="$1"  ;;
    -n) shift; n="$1"  ;;
    *)  args+=( "$1" ) ;;
  esac
  shift
done

# checkopt
[ -n "${s//[0-9]/}${n//[0-9]/}" ] && errorout 'non numeric args?'

# setopt
[ ${#args[@]} -eq 0 ] && args=( './' )

# go
for dir in "${args[@]}"; do
  make_clean
  LC_ALL='C'

  if [ ${s:-0} -ne 0 ]; then
    find $dir -mindepth 1 -exec du {} \; | sort -nr > $workdir/sizes.lst
    by_size
  elif [ ${n:-0} -ne 0 ]; then
    find $dir -mindepth 1 > $workdir/sizes.lst
    by_num
  else
    message
  fi

  move
done
