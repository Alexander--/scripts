#!/bin/bash
#
# pbrisbin 2009, 2010, 2011
#
# ossvol is a simple script to manage oss volume levels and muting.
#
# original script by Daniel J Griffiths <ghost1227@archlinux.us>, dzen
# OSD concept by breunig
#
###

message() {
  cat << EOF
  usage: ossvol [option] [argument]"

    options:
      -i, --increase   increase volume by [argument]
      -d, --decrease   decrease volume by [argument]
      -t, --toggle     toggle mute on and off

EOF
  exit 1
}

# sets the volume level and stores the value in the var level for output
# via dzen or whatever
set_level() { read -r level < <(ossmix $channel -- $1 | cut -d ' ' -f 8); }

# toggles mute on/off
toggle() {
  if [[ -f "$volume" ]]; then
    set_level $(< "$volume")
    rm "$volume"
  else
    ossmix $channel | cut -d ' ' -f 10 | cut -d '.' -f 1 > "$volume"
    set_level 0
  fi
}

# adjust the current volume level, args must be +N or -N
adjust() {
  local arg="$1"

  # restore from mute
  if [[ -f "$volume" ]]; then
    # arg is now stored volume +/- argument
    arg="+$[ $(< "$volume") $arg ]"
    rm "$volume"
  fi

  set_level $arg
}

# use variable $level to create an OSD for the current volume level
do_dzen() {
  local pipe='/tmp/volpipe' s=1

  # make a fifo from which dzen will read, this prevents mutliple dzens
  # from being spawned given repeated volume commands
  if [[ ! -e "$pipe" ]]; then
    mkfifo "$pipe"
    (dzen2 "${dzen_args[@]}" < "$pipe"; rm -f "$pipe") &
  fi

  # send the text to the fifo (and eventually to dzen)
  (echo ${level/.*/} 25 | gdbar "${gdbar_args[@]}"; sleep $s) >> "$pipe"
}

dzen_args=(
  -tw 1920 -h 20 -y -30
  -bg '#101010'
)

gdbar_args=(
  -w 400 -h 7
  -fg '#606060' 
  -bg '#404040'
)

volume="$HOME/.volume"
channel='vmix0-outvol'

case "${1:--i}" in
  -i|--increase) adjust "+${2:-3}" ;;
  -d|--decrease) adjust "-${2:-3}" ;;
  -t|--toggle)   toggle       ;;
  *)             message      ;;
esac

# do dzen only if in X
[[ -n "$DISPLAY" ]] && do_dzen || echo "$channel set to $level"
