#!/bin/bash
#
# pbrisbin 2010
#
# http://pbrisbin.com/bin/updateconfigs
#
# the following script can be used by anyone to autoupdate their own
# dotfiles from the ones housed on my server.
#
# this script will only update a file if you have one on your system
# of the same path. my dotfiles are stored as single files named
# after the path under ~/ with the leading dot removed and any
# directory delimiters replaced with an _; this script reverses that
# scheme, checks for the file and _overwrites_ it with the one from
# my server.
#
# you have been warned.
#
###

errorout() { echo "error: $*"; exit 1; }

# load the site's directory listing and filter to just the basenames
# of the dotfiles
get_list() {
  dotfiles=( $(lynx --dump "$server" 2>/dev/null |\
      sed -e '/.*http:\/\/pbrisbin\.com\/dotfiles\/\([^\?]+*\)/!d;s//\1/g' |\
      grep -v "$ignores") )

  [[ ${#dotfiles[@]} -ne 0 ]]
}

# translation
remote2local() { echo "$HOME/.${1//_//}"; }

# the site/directory of my public dotfiles
server='http://pbrisbin.com/dotfiles'

# remote filenames that catch this regex are ignored
ignores='^mutt_\|^xinitrc$\|^msmtprc$\|^offlineimaprc$\|^irssi_config$'

# pass -q once cronned
[[ "$1" = '-q' ]] && quiet=true || quiet=false

if get_list; then
  for dotfile in "${dotfiles[@]}"; do
    file="$(remote2local "$dotfile")"

    if [[ -w "$file" ]]; then
      $quiet || echo "updating $file..."
      wget -q -O "$file" "$server/$dotfile"
    else
      $quiet || echo "$file not found, skipping..."
    fi
  done
else
  $quiet && exit 1 || errorout 'could not get dotfiles listing'
fi
