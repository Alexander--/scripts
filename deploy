#!/bin/bash
#
# pbrisbin 2010
#
# don't run this as root as we rely on user-specific ENV vars and
# haskell modules; sudo is used for the parts that require it.
#
###

errorout() { echo "error: $*" >&2; exit 1; }
message()  { echo 'usage: deploy [ --test ]'; exit 1; }

cp_file() {
  local file="$1" dest="$2" _cp

  # need sudo to write to /srv/http
  $test && _cp='cp -r' || _cp='sudo cp -r'

  if [[ -e "$file" ]]; then
    $_cp "$file" "$dest/" || errorout "$file: failed to copy"
  else
    echo "omitting $file; does not exist" >&2
  fi
}

compile_app() {
  local opt="$1" dest="$2"

  echo 'recompiling the application...'
  touch Settings.hs # so that CPP options will always take
  ghc $opt -threaded --make -o app.cgi fastcgi.hs || errorout 'failed'
  touch Settings.hs
  cp_file app.cgi "$dest/"

}

test_deploy() {
  echo 'creating/wiping test directory...'
  [[ -d "$testsite" ]] || mkdir -p "$testsite"
  rm -rf "$testsite"/*

  # pull files down from prod
  echo 'updating test files from prod...'
  cp_file "$prodsite/xmonad"  "$testsite/"
  cp_file "$prodsite/haskell" "$testsite/"
  cp_file "$prodsite/static"  "$testsite/"
  cp_file "$prodsite/favicon.ico" "$testsite/"

  # setup lighttpd for local instance
  cp /etc/lighttpd/dev.conf "$testsite/"

  compile_app '' "$testsite"
  migrate_db

  cd "$testsite"
  echo 'starting test server...'
  lighttpd -D -f dev.conf
}

prod_deploy() {
  sudo true # get our pw upfront

  if pgrep lighttpd &>/dev/null; then
    echo 'stopping services...'
    sudo /etc/rc.d/lighttpd stop || errorout 'failed'
  fi

  compile_app '-DPROD' "$prodsite"
  migrate_db
  adjust_permissions

  echo 'starting production services...'
  sudo /etc/rc.d/lighttpd start || errorout 'failed'
}

# only called in a PROD deployment
adjust_permissions() {
  echo 'fixing permissions...'
  sudo chown root:http "$prodsite"
  sudo chown -R patrick:http "$prodsite"/*
  sudo chown http:http "$prodsite/app.cgi"
  sudo chown http:http "$prodsite/client_session_key.aes"
  sudo chown http:http "$prodsite/$prod_db"
}

migrate_db() {
  if $test; then
    # always overwrite a test database
    echo 'migrating database...'
    cp "$dev_db" "$testsite/$test_db"
  else
    # never overwrite a prod database
    if [[ ! -e "$prodsite/$prod_db" ]]; then
      echo 'migrating database...'
      sudo cp "$dev_db" "$prodsite/$prod_db"
    fi
  fi
}

# constants
devsite="$HOME/Code/haskell/devsite"
testsite="$HOME/http-test"
prodsite='/srv/http'

dev_db='dev-posts.s3db'
prod_db='posts.s3db'
test_db="$dev_db"

# defaults
test=false

# getopts
while [[ -n "$1" ]]; do
  case "$1" in
    -t|--test)  test=true  ;;
    *)          message    ;;
  esac
  shift
done

# run
cd "$devsite" || errorout 'failed to change directory'

$test && test_deploy || prod_deploy

echo 'done.'
