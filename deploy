#!/bin/bash
#
# pbrisbin 2010
#
# don't run this as root as we rely on user-specific ENV vars and
# haskell modules; sudo is used for the parts that require it.
#
###

errorout() { echo "error: $*" >&2; exit 1; }
message()  { echo 'usage: deploy [ --force | --test | --help ]'; exit 1; }

mv_file() {
  local file="$1" dest="$2" _cp

  # need sudo to write to /srv/http
  $test && _cp='cp -r' || _cp='sudo cp -r'

  if [[ -e "$file" ]]; then
    $_cp "$file" "$dest/" || errorout "$file: failed to copy"
  else
    echo "omitting $file; does not exist" >&2
  fi
}

compile_site() {
  local dest="$1"

  # force ghc to recompile everything
  $force && find ./ -type f -name '*.hs' -exec touch {} \;

  sed -i 's/^-- \(#define PRODUCTION\)$/\1/g' Settings.hs
  ghc --make -o app.cgi fastcgi.hs || errorout 'failed'
  sed -i 's/^\(#define PRODUCTION\)$/-- \1/g' Settings.hs

}

test_deploy() {
  echo 'creating/wiping test directory...'
  [[ -d "$testsite" ]] || mkdir -p "$testsite"
  rm -rf "$testsite"/*

  # pull files down from prod
  echo 'updating test files from prod...'
  mv_file "$prodsite/pandoc" "$testsite"
  mv_file "$prodsite/xmonad" "$testsite"
  mv_file "$prodsite/static" "$testsite"
  mv_file "$prodsite/favicon.ico" "$testsite"

  # push files up from dev
  echo 'updating test files from dev...'
  mv_file hamlet "$testsite"
  mv_file cassius "$testsite"

  # setup lighttpd for local instance
  cp /etc/lighttpd/dev.conf "$testsite/"

  # recompile
  echo 'recompiling the application...'
  compile_app
  mv_file app.cgi "$testsite"

  # start services
  cd "$testsite"
  echo 'starting test server...'
  lighttpd -D -f dev.conf
}

prod_deploy() {
  # get our pw upfront
  sudo true

  # stop services
  if pgrep lighttpd &>/dev/null; then
    echo 'stopping services...'
    sudo /etc/rc.d/lighttpd stop || errorout 'failed'
  fi

  # push up to prod
  echo 'updating prod files...'
  mv_file hamlet "$testsite"
  mv_file cassius "$testsite"

  # recompile
  echo 'recompiling the application...'
  compile_app
  mv_file app.cgi "$prodsite"

  adjust_permissions

  # start services
  echo 'starting production services...'
  sudo /etc/rc.d/lighttpd start || errorout 'failed'
}

adjust_permissions() {
  echo 'fixing permissions...'
  chown root:http "$prodsite"
  chown -R patrick:http "$prodsite"/*
  chown http:http "$prodsite/app.cgi"
  chown http:http "$prodsite/client_session_key.aes"
  chown http:http "$prodsite/comments.db"
}

# constants
devsite="$HOME/Code/haskell/devsite"
testsite="$HOME/http-test"
prodsite='/srv/http'

# defaults
force=false
test=false

# getopts
while [[ -n "$1" ]]; do
  case "$1" in
    -h|--help)  message    ;;
    -f|--force) force=true ;;
    -t|--test)  test=true  ;;
  esac
  shift
done

# run
cd "$devsite" || errorout 'failed to change directory'

if $test; then
  test_deploy
else
  prod_deploy
fi

echo 'done.'
