#!/bin/bash
#
# pbrisbin 2010
#
# don't run this as root as we rely on user-specific ENV vars and haskell
# modules; sudo is used for the parts that require it
#
###

# default behavior is to update all static files without wiping the
# destination first and to let ghc choose which files need recompiling
message()  { echo 'usage: deploy [ --wipe | --post | --force | --help ]'; exit 1; }

errorout() { echo "error: $*" >&2; exit 1; }

mv_file() {
  local file="$1"

  if [[ -e "$file" ]]; then
    # this could be cp, scp, rsync, whatever
    sudo cp -r "$file" "$prodsite/" || errorout "$file: failed to copy"
  else
    echo "omitting $file; does not exist" >&2
  fi
}

prompt() {
  read -p "$* [Y/n]? " a

  case ${a:-y} in
    Y*|y*) return 0 ;;
    *)     return 1 ;;
  esac
}

devsite="$HOME/Code/haskell/devsite"
prodsite='/srv/http'

wipe=false
post=false
force=false

while [[ -n "$1" ]]; do
  case "$1" in
    '--help')  message    ;;
    '--force') force=true ;;

    # these can't both be true
    '--wipe')  $post || wipe=true ;;
    '--post')  $wipe || post=true ;;
  esac
  shift
done

# just so we enter out password once at the start
sudo true

if pgrep lighttpd &>/dev/null; then
  # stop it only if it's running
  echo 'stopping services...'
  sudo /etc/rc.d/lighttpd stop || errorout 'failed'
fi

cd "$devsite" || errorout 'failed to change directory'

# check variable so we don't rm -rf /
if [[ -n "$prodsite" ]] && $wipe; then
  if prompt "this will WIPE $prodsite/*, are you sure"; then
    echo 'wiping destination...'
    sudo rm -rf "$prodsite/"* || errorout 'failed to wipe destination.'
  fi
fi


if $post; then
  echo 'updating template files...'
  mv_file hamlet
  mv_file cassius
else
  echo 'updating all static files...'
  mv_file aur
  mv_file fileshare
  mv_file static
  mv_file xmonad

  mv_file hamlet
  mv_file cassius
fi

if $force; then
  find ./ -type f -name '*.hs' -exec touch {} \;
fi

echo 'recompiling the application...'
sed -i 's/^-- \(#define PRODUCTION\)$/\1/g' Settings.hs # production setting
ghc --make -o app.cgi fastcgi.hs || errorout 'failed'   # compile it
sed -i 's/^\(#define PRODUCTION\)$/-- \1/g' Settings.hs # revert to development

mv_file app.cgi

echo 'fixing permissions...'
sudo chown -R http:http "$prodsite"

echo 'starting services...'
sudo /etc/rc.d/lighttpd start || echo 'failed'

echo 'done.'
